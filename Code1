#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//#include <conio.h>

//global functions
int calculate(int *);
int* select(int *);
void crossover(int*, int*);
void sort_select(void);

//global variables
int best_score[20];
int score[9];
int inex[6];

void main() {
    int a[s][t],select_string[5][70];
    int best_string[20][70],max,ind=0;
    int p,counter=1;
    int i,n,j,temp[10];
    //randomize();
   srand(time(0));
printf("Enter a[1][0] :");
scanf("%d",&s);
printf("Enter a[0][1] :");
scanf("%d",&t);

 
    //clrscr();
    for(j=0;j<s;j++)
        for(i=0;i<t;i++)
        //game points assign
            a[s][t]=(rand()%2);
    //THE NUMBER OF GENERATION TO BE SCANED IN
     printf(" Enter the no of generation ");
    scanf("%d",&n);
    for(i=0;i<s;i++)
        score[i]=calculate(&a[i][0]);
    //function for sorting the score array and finding the index of best score
    sort_select();
    for(i=0;i<7;i++)
    { p=inex[i];
        //THE ORDER OF BEST SCORE STORED IN INDEX.
        for(j=0;j<t;j++)
            select_string[s][t]=a[p][t];
    }
    best_score[0]=score[0];
    for(i=0;i<s;i++)
        best_string[0][i]=select_string[0][i];
    while(counter < n)
    {
        for (i = 0; i < 7; i = i + 2)
            crossover(&a[i][0], &a[i + 1][0]);
        for (i = 0; i < 9; i++)
            score[i] = 0;
        //calculate function here will return the score of each string
        sort_select();
        best_score[counter] = score[0];
        p = inex[0];
        for (j = 0; j <s; j++)
            best_string[counter][j] = a[p][j];
        counter++;
    }
    //output the best score!
    for(p=0;p<n;p++)
    {
        printf("The best score in the generation %d :",p+1);
        printf(" %d \n", best_score[p]);
    }
    //output the best strings:
    for(i=0;i<n;i++)
    {
        printf("\n\nTHE BEST STRNG IN GENERATION %d :\n\n", i + 1);

        for (j = 0; j < t; j++) {
            if (j % 2 == 0 && j != 0)
                printf(" ");
            if (best_string[i][j] == 1)
                printf("d");
                //COVERTING 1’S AND 0’S TO d AND c
            else
                printf("c");
        }

    }
    //calculating the best of the best
    for(i=0;i<n;i++)
        temp[i]=best_score[i];
    max=temp[0];
    for(i=1;i<n;i++)
    {
        if(max<temp[i])
        {
            max=temp[i];
            ind=i;
        }
    }
    //calculating the best from the selected
    printf("\n\n");
    printf("\n The Best String in the Generation is:\n\n");
    for(i=0;i<70;i++)
    {
        if(i%2==0&&i!=0)
        {
            printf(" ");
        }
        if(best_string[ind][i]==1)
        {
            printf("d");
        } else{
            printf("c");
        }
    }
    printf("\n\nTHE CORRESPONDING BEST SCORE IS: %d ",best_score[ind]);
    //getch();
}

int calculate(int* ptr) {
    int *a;
    int p1, p2, i;
    a = ptr;
    p1 = 0;
    p2 = 0;
    for (i = 0; i < 70; i = i + 2)//calcuating the values according to the truth table
    {
        if (a[i] == 1 && a[i + 1] == 1) {
            p1 = p1 + 3;
            p2 = p2 + 3;
        }
        if (a[i] == 1 && a[i + 1] == 0) {
            p1 = p1 + 5;
            p2 = p2 + 0;
        }
        if (a[i] == 0 && a[i + 1] == 1) {
            p1 = p1 + 0;
            p2 = p2 + 5;
        }
        if (a[i] == 0 && a[i + 1] == 0) {
            p1 = p1 + 1;
            p2 = p2 + 1;
        }
    }
    return (p1 + p2);
}
//ordinary swapping technique followed here
void sort_select() {
    int temp[9], i, j, t;
    for (i = 0; i < 10; i++)
        temp[i] = score[i];
    for (i = 0; i < 10; i++)
        for (j = 9; j >= i; j--) {
            if(temp[i]<temp[j]){
                //usual swapping using 3 variables

                t=temp[j];
                temp[j]=temp[i];
                temp[i]=t;

            }
        }
    for(i=0;i<7;i++)
        for(j=0;j<10;j++)
            if(temp[i]==score[j])
                inex[i]=j;
            score[0]=temp[0];

}

void crossover(int *ptr1,int *ptr2)
{
    int temp,i,j;
    int ind=(rand()%20);//Random point crossover is used here

    for(i=ind;i<60;i++)
    {
        temp=ptr1[i];
        ptr1[i]=ptr2[i];
        ptr2[i]=temp;

    }

}
